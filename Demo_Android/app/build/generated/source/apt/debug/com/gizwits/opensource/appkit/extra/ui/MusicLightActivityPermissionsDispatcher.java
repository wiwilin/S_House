// This file was generated by PermissionsDispatcher. Do not modify!
package com.gizwits.opensource.appkit.extra.ui;

import android.support.v4.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class MusicLightActivityPermissionsDispatcher {
  private static final int REQUEST_USEVISUALIZER = 1;

  private static final String[] PERMISSION_USEVISUALIZER = new String[] {"android.permission.RECORD_AUDIO"};

  private MusicLightActivityPermissionsDispatcher() {
  }

  static void useVisualizerWithCheck(MusicLightActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_USEVISUALIZER)) {
      target.useVisualizer();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_USEVISUALIZER)) {
        target.showRationaleForRecord(new UseVisualizerPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_USEVISUALIZER, REQUEST_USEVISUALIZER);
      }
    }
  }

  static void onRequestPermissionsResult(MusicLightActivity target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_USEVISUALIZER:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_USEVISUALIZER)) {
        target.showDeniedForCamera();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.useVisualizer();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_USEVISUALIZER)) {
          target.showNeverAskForCamera();
        } else {
          target.showDeniedForCamera();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class UseVisualizerPermissionRequest implements PermissionRequest {
    private final WeakReference<MusicLightActivity> weakTarget;

    private UseVisualizerPermissionRequest(MusicLightActivity target) {
      this.weakTarget = new WeakReference<MusicLightActivity>(target);
    }

    @Override
    public void proceed() {
      MusicLightActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_USEVISUALIZER, REQUEST_USEVISUALIZER);
    }

    @Override
    public void cancel() {
      MusicLightActivity target = weakTarget.get();
      if (target == null) return;
      target.showDeniedForCamera();
    }
  }
}
